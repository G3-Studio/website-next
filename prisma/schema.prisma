// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                 Int  @id @default(autoincrement())
//   userId             Int
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model User {
  id        Int     @default(autoincrement()) @id
  email     String  @unique
//  emailVerified DateTime?
  password  String
  name      String?
  // accounts      Account[]
  // sessions      Session[]
}


// model Session {
//   id           Int   @id @default(autoincrement())
//   sessionToken String   @unique
//   userId       Int
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }
// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Workshop {
  id        Int     @default(autoincrement()) @id
  title     String
  components Component[] 
}

model Component {
  id        String     @default(uuid()) @id
  order     Int
  type     String
  data     String
  workshop  Workshop   @relation(fields: [workshopId], references: [id])
  workshopId Int
  subcomponents Subcomponent[]
}

model Subcomponent {
  id        String     @default(uuid()) @id
  order     Int
  type     String
  data     String
  component  Component   @relation(fields: [componentId], references: [id])
  componentId String
  subsubcomponents Subsubcomponent[]
}

model Subsubcomponent {
  id        String     @default(uuid()) @id
  order     Int
  type     String
  data     String
  subcomponent  Subcomponent   @relation(fields: [subcomponentId], references: [id])
  subcomponentId String
}